import os
import streamlit as st
from langchain.chains import create_sql_query_chain
from langchain_google_genai import GoogleGenerativeAI
from sqlalchemy import create_engine
from sqlalchemy.exc import ProgrammingError
from langchain_community.utilities import SQLDatabase
import google.generativeai as genai
import pymysql

# Configure GenAI Key
from dotenv import load_dotenv
load_dotenv() 

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
api_key = os.getenv("GOOGLE_API_KEY")

#Database connection parameters 
db_user = os.getenv("MYSQL_USER")
db_password = os.getenv("MYSQL_PASSWORD")
db_host = os.getenv("MYSQL_HOST")
db_name = os.getenv("MYSQL_DATABASE")

# Create SQLAlchemy engine
engine = create_engine(f"mysql+pymysql://{db_user}:{db_password}@{db_host}/{db_name}")

# Initialize LLM with Gemini AI model
LLM = GoogleGenerativeAI(model="gemini-pro", api_key=api_key)

# Initialize SQLDatabase
db = SQLDatabase(engine, sample_rows_in_table_info=3)

# Create SQL query chain
chain = create_sql_query_chain(LLM, db)

# Few-shot examples
few_shot_examples = """
Q: Show me the total sales for each product.
SQL: SELECT product_name, SUM(sales_amount) FROM sales GROUP BY product_name;

Q: List all customers who have purchased more than 5000 worth of products.
SQL: SELECT customer_name FROM sales WHERE sales_amount > 5000;

Q: Show the top 10 products by sales volume.
SQL: SELECT product_name, SUM(quantity_sold) AS total_sales FROM sales GROUP BY product_name ORDER BY total_sales DESC LIMIT 10;

Please use MySQL functions where needed, such as DATE_FORMAT() for date formatting instead of strftime().
"""

# Function to generate prompt and execute query
def execute_query(question):
    try:
        # Few-shot prompt with user question appended
        prompt = f"""
        You are an expert SQL query generator. Given a natural language question, translate it into a SQL query.
        Here are a few examples:
        
        {few_shot_examples}
        
        Now, translate the following question into SQL:
        Q: {question}
        SQL:
        """
        
        # Generate SQL query from the prompt using LLM
        response = chain.invoke({"question": prompt})
        
        # Clean the SQL query generated by the LLM
        cleaned_query = response.strip('```sql\n').strip('\n```').strip()

        # Post-process the query to ensure MySQL compatibility
        cleaned_query = cleaned_query.replace("strftime", "DATE_FORMAT")

        # Check if the cleaned_query starts with 'mysql' and remove it
        if cleaned_query.lower().startswith('mysql'):
            cleaned_query = cleaned_query[len('mysql'):].strip()
        
        print("Generated SQL Query:", cleaned_query)

        # Execute the SQL query on the database
        result = db.run(cleaned_query)
        
        # Return the generated query and the result
        return cleaned_query, result
    
    except ProgrammingError as e:
        st.error(f"An error occurred: {e}")
        return None, None

# Streamlit interface
st.title("MySQL Chatbot Using Gemini LLM")

# User input
question = st.text_input("Enter your question:")

# Button to execute the query
if st.button("Execute"):
    if question:
        # Call the function to generate the SQL query and execute it
        cleaned_query, query_result = execute_query(question)
        
        if cleaned_query and query_result is not None:
            st.write("Generated SQL Query:")
            st.write(cleaned_query)
            st.write("Query Result:")
            st.write(query_result)
        else:
            st.write("No result returned due to an error.")
    else:
        st.write("Please enter a question.")
